##################################################
##################################################
##
## ProspeR Manual
##
## All programming by
## John Akwei, ECMp ERMp Data Scientist
## ContextBase
## https://contextbase.github.io
##
## Email: johnakwei1@gmail.com
##
##################################################
##################################################

##################################################
##################################################
##
## Package Description
##
##################################################
##################################################

ProspeR is an R package for accessing the functions of the Prosper API.

www.prosper.com is a peer to peer lending marketplace that connects individuals who need a low rate personal loan to individuals who have money to lend. Each loan is funded by a combination of several people from all over the United States. The ProspeR R programming language package is built to assist the investor in managing their prosper.com account.

ProspeR Package capabilities:
Formats Investor's prosper.com API Credentials
Account Summary
Available Cash Report
Loans Report
Notes Report
Creates Orders
Payment History Report
Pending Tranfers Report
Portfolios Report
Creates Portfolios

Prosper R Package functions:
Access_Header()
Access_Data()
Verify_Credentials()
Token_Request()
Authorization()
Account_Summary()
Available_Cash()
Notes()
Loans()
Create_Orders()
Payments()
Pending_Transfers()
Portfolios()
Create_Portfolio()

Instructions:
Format "header" information with the "Access_Header()" function.
Format investor data with the "Access_Data()" function.
"Verify_Credentials()" is a functions to verify "header" and "investor data" accuracy.
Obtain a prosper.com API token with the "Token_Request()" function.
Obtain authorization to access the prosper.com API with the "Authorization()" function.
Download account information with the "Account_Summary()" function.
Download available cash information with the "Available_Cash()" function.
Download investor notes owned information with the "Notes()" function.
Download investor loans information with the "Loans()" function.
Upload a list of Orders with the "Create_Orders()" function.
Download a payments report with the "Payments()" function.
Download a pending transfers report with the "Pending_Transfer()" function.
Download a list of investor portfolios with the "Portfolios()" function.
Upload investor portfolios via the prosper.com API with the "Create_Portfolio()" function.

##################################################
##################################################
##
## Access_Header.R
##
##################################################
##################################################

# Create Prosper authorization headers
Access_Header <- function(){
  headers <- gsub("\\[|\\]", "",
                  toJSON(data.frame(Accept='application/json',
                      `Content-Type` = 'application/json')))
  headers
  }

# Example
# header <- Access_Header()
# header
# {"accept":"application/json","Content.Type":"application/x-www-form-urlencoded"}

##################################################
##################################################
##
## Access_Data.R
##
##################################################
##################################################

# AccessData function
Access_Data <- function(investorID, investorSecret,
                       prosperUsername, prosperPassword){
  data <-  list(grant_type='password',
                client_id=investorID,
                client_secret=investorSecret,
                username=prosperUsername,
                password=prosperPassword)
  data
}

# Example
# payload <- Access_Data(client_id, client_secret,username,
                       # password)
# payload

##################################################
##################################################
##
## Verify_Credentials.R
##
##################################################
##################################################

Check_Header <- function(x = NULL){
  # If "header" is null, then a value was not passed in
  # the calling function. If it isn't null, then return it.
  if(!is.null(x)) {
    return(x)
    } else {
      stop("Please create the header object using the AccessHeader() function",
           call.= FALSE)
    }
  # If header is null, then check if it exists in the global
  # environment
  if (!exists("header", envir= .GlobalEnv)){
    stop("Please create the header object using the AccessHeader() function",
         call.= FALSE)
  }
  get("header")
}

# Example
# Check_Header(header)

Check_Data <- function(x = NULL){
  # If data is null, then a value was not passed in the calling
  # function. If it isn't null, then return it.
  if(!is.null(x)) {
     return(x)
    } else {
      stop("Please create the data object using the AccessData() function",
           call.= FALSE)
    }
  # If data is null, then check if it exists in the global environment
  if (!exists("data", envir= .GlobalEnv)){
    stop("Please create the data object using the AccessData() function",
         call.= FALSE)
  }
  get("data")
}

# Example
# Check_Data(data)

##################################################
##################################################
##
## Token_Request.R
##
##################################################
##################################################

# A function to obtain the token for Prosper API authorization.

# "requestURL", the prosper.com token request url, i.e. "https://api.prosper.com/v1/security/oauth/token"
# "requestHeader", the request header from "Access_Header()"
# "data", a dataframe created with "Access_Data()"

Token_Request <- function(requestURL, requestHeader, data){
  prosper_endpoints <- oauth_endpoint(NULL, "authorize", "accessToken",
                                      base_url = requestURL)
  prosper_app <- oauth_app("prosper_endpoints", key = data[2],
                           secret = data[3])
  prosper_token <-  oauth2.0_token(prosper_endpoints, prosper_app,
                                   config_init = requestHeader,
                                   user_params = data)
  
  if(status_code(prosper_token)!=200){
    stop("Prosper API Token Request Failed", status_code(prosper_token))}
  
  parsed <- fromJSON(content(prosper_token, "text", encoding="UTF-8"),
                     simplifyVector = TRUE)
  
  structure(list(content = parsed, response = prosper_token),
            class = "Prosper_API")
}

# Example
#
# Request_URL <- "https://api.prosper.com/v1/security/oauth/token"
# header <- Access_Header()
# clientid <- "<prosper.com client id>"
# clientsecret <- "<prosper.com client secret>"
# clientusername <- "<prosper.com username>"
# clientpassword <- "<prosper.com password>"
# payload <- AccessData(client_id, client_secret, username,
#                    password)
#
# AuthorizationKey <- Token_Request(Request_URL, header, payload)

##################################################
##################################################
##
## Authorization.R
##
##################################################
##################################################

# A wrapper to obtain the authorization key for
# access to the Prosper API.
# "authURL", the prosper.com authorization url
# "AuthHeader", authorization header from "AuthHeader()"
# "data", a list created with the "AuthData()"
# "auth", a prosper authorization key from "RequestToken.R"

Authorization <- function(authURL, authKey){
  response <- POST(authURL, encode="json",
            add_headers("Accept": "application/json",
                        "Authorization": "bearer",
                        oauthToken.access_token))
  response
  }


# Example
#
# Prosper_Base_Address <- "https://api.prosper.com/v1/"
# auth <- "<authoriztion key>"
# Authorization(Prosper_Base_Address, auth)

##################################################
##################################################
##
## Accounts.R
##
##################################################
##################################################

# Accesses the user's account and return the summary data.
# The data points include available cash, total account balance,
# and the number of notes in the portfolio.

Accounts <- function(searchURL){
  r <- GET("https://api.prosper.com/v1/summary")
  
  parsed <- fromJSON(content(r, "text", encoding="UTF-8"),
                     simplifyVector = TRUE)
  
  if (httr::http_error(r)) {
    stop(sprintf("Prosper API request failed [%s]\n%s\n<%s>",
                 status_code(r), parsed$message, parsed$documentation_url
    ), call. = FALSE)}
  
  parsed <- {y <- unlist(parsed)
  data.frame("Field"= names(y), "Value"= as.character(y),
             stringsAsFactors = F, row.names = NULL)}
  
  structure(list(content = parsed, response = r),
            class = "Prosper_API")
}

# Example
#
# Accounts <- Accounts()
# print(Accounts)

##################################################
##################################################
##
## Available_Cash.R
##
##################################################
##################################################

# Retrieves the available cash in the user's account. Cash
# committed to open buy orders is excluded from the total.

Available_Cash <- function(){
  r <- GET(paste0("https://api.prosper.com/v1/accounts/prosper/",
             "?", "filters=AVAILABLE_CASH", sep=""))

  if (httr::http_error(r)) {
    stop(sprintf("Prosper API request failed [%s]\n%s\n<%s>",
        status_code(r), parsed$message,
        parsed$documentation_url),
      call. = FALSE)
  }
  content(r)
  }

# Example
# Available_Cash()

##################################################
##################################################
##
## Notes.R
##
##################################################
##################################################

# Report of the investor's notes owned

Notes <- function(){
  r <- GET("https://api.prosper.com/v1/notes")

  if (httr::http_error(r)) {
    stop(sprintf("Prosper API request failed [%s]\n%s\n<%s>",
        status_code(r),parsed$message, parsed$documentation_url),
      call. = FALSE)
  }
  content(r)
}

# Example
# Notes()

##################################################
##################################################
##
## Loans.R
##
##################################################
##################################################

# Listing of all loans on the primary market
#
# showAll (logical), indicates whether all loans should be retured.
# Use FALSE to limit the results to those loans listed in the most recent
# listing period.

Loans <- function(showAll=TRUE){
  searchURL <- "https://api.prosper.com/v1/loans/"
  r <- GET(searchURL, query=list("showAll" = showAll))
  r
}

# Example
# Loans()

##################################################
##################################################
##
## Orders.R
##
##################################################
##################################################

# Submit a new investment order

SubmitOrder <- function(loanId, amount){
  postURL <- "https://api.prosper.com/v1/orders/"
  orders <- data.frame("loanId" = loanId,
                      "requestedAmount" = amount)

  orders <- as.data.frame(cbind(orders, portfolioId),
                           stringsAsFactors=F)

  params <- list("aid" = investorID, "orders"= orders)
  resp <- POST(postURL, params)
}

# Example
#
# loan_id <- "<prosper loan id>"
# SubmitOrder(loan_id, amount=25)

##################################################
##################################################
##
## Payments.R
##
##################################################
##################################################

# The payments API allows you to retrieve the payment history
# on a single loan, or a list of loans that you own. If you
# have purchased a Note on the loan, the payments API will
# return historical payment history on your pro-rata portion
# of the loan. The payments API returns all payments in historical order in
# which the loan payments have been made. If you pass in multiple
# loan numbers as query parameters to the API, you will receive
# payments made to the loans in historical order.

# GET /loans/payments/?loan_number={loan_number}
# GET /loans/payments/?loan_number={loan_number1},{loan_number2},{loan_number3}

Payments <- function(showAll=TRUE){
  searchURL <- "https://api.prosper.com/v1/loans/payments/"
  result <- GET(searchURL, query=list("showAll" = showAll))
  result
}

# Example
Payments(showAll=TRUE)

##################################################
##################################################
##
## Pending_Transfers.R
##
##################################################
##################################################

# Return investor's pending transfers

Pending_Transfers <- function(authKey){
  searchURL <- paste0("https://api.prosper.com/v1/accounts/prosper/",
                      "?", "funds/pending", sep="")

  r <- GET(searchURL,
           add_headers("Accept": "application/json",
                       "Authorization": "bearer ",
                       authKey))

  if(httr::status_code(r)!=200){
    stop("Prosper API request failed")}

  parsed<- fromJSON(content(r, "text", encoding="UTF-8"),
                              simplifyVector = TRUE)

  if (http_error(r)) {
    stop(sprintf("Prosper API request failed [%s]\n%s\n<%s>",
        status_code(r), parsed$message, parsed$documentation_url
      ), call. = FALSE)
    }

  parsed <- {y<- unlist(parsed)
    data.frame("Field"= names(y), "Value"= as.character(y),
               stringsAsFactors = F, row.names = NULL)}

  structure(list(content = parsed, response = r),
    class = "Prosper_API")
  }

# Example
#
# auth <- "<prosper api authentication key>"
# Pending_Transfers(auth)

##################################################
##################################################
##
## Portfolios.R
##
##################################################
##################################################

# Listing of investor's portfolios

# Provides a dataframe of all portfolios owned by the investor.

Portfolios <- function(){
  searchURL <- paste0("https://api.prosper.com/v1/accounts/prosper/",
                      "?", "portfolios", sep="")
  r <- GET(searchURL)
  r
}

# Example
# Portfolios()

##################################################
##################################################
##
## Create_Portfolio.R
##
##################################################
##################################################

# Create a new portfolio
#
# Create a new portfolio to assign loans to. Notes can be assigned to
# a portfolio using the API when they are purhcased from the primary
# market.
#
#  port_name String. Name of the new portfolio
#  port_desc String. Portfolio description

Create_Portfolio <- function(investorID, port_name,
                             port_desc, authKey){
  postURL <- paste0(investorID,"portfolios")
  params <- list("actorId" = investorID,
                 "portfolioName" = port_name,
                 "portfolioDescription" = port_desc)
  resp <- POST(postURL, params, authKey)
  }

# Example
#
# clientid <- "<prosper api key>"
# portfolio_name <- "<portfolio name>"
# portfolio_desc <- "<portfolio description>"
# auth <- "<prosper api authorization key>"
# Create_Portfolio(clientid, portfolio_name,
#                  portfolio_desc, auth)
